import { Context, BaseContext } from "koa";
import { request, summary, path, body, responsesAll, tagsAll } from "koa-swagger-decorator";
import { User, userSchema } from "../entity/user";
import * as UserService from '../services/user'
import { createSuccessResponse } from "../utils";
@responsesAll({ 200: { description: "success"}, 400: { description: "bad request"}, 401: { description: "unauthorized, missing/wrong jwt token"}})
@tagsAll(["User"])
export default class UserController {

    @request("get", "/users")
    @summary("Find all users")
    public static async getUsers(ctx: BaseContext): Promise<void> {
        // 业务错误通常status仍然是200,具体业务错误是根据业务code区别
        // controller层只做路由映射，实际的业务逻辑放在service层处理
        try {
            const users: User[] = await UserService.getUsers();
            createSuccessResponse(ctx, {
                code: 0,
                msg: 'success',
                data: users
            });
        } catch (error) {
            createSuccessResponse(ctx, {
                code: -1, //业务错误code，可根据业务具体约定
                msg: error.message
            });
        }
    }

    @request("get", "/users/{id}")
    @summary("Find user by id")
    @path({
        id: { type: "number", required: true, description: "id of user" }
    })
    public static async getUser(ctx: BaseContext): Promise<void> {
        // 业务错误通常status仍然是200,具体业务错误是根据业务code区别
        // controller层只做路由映射，实际的业务逻辑放在service层处理
        try {
            const { id } = ctx.params;
            const user: User = await UserService.getUser(id);
            createSuccessResponse(ctx, {
                code: 0,
                msg: 'success',
                data: user
            });
        } catch (error) {
            createSuccessResponse(ctx, {
                code: -1, //业务错误code，可根据业务具体约定
                msg: error.message
            });
        }
    }

    @request("post", "/users")
    @summary("Create a user")
    @body(userSchema)
    public static async createUser(ctx: BaseContext): Promise<void> {
        // 业务错误通常status仍然是200,具体业务错误是根据业务code区别
        // controller层只做路由映射，实际的业务逻辑放在service层处理
        try {
            const {name, email} = ctx.request.body;
            const user: User = await UserService.createUser({name,email})
            createSuccessResponse(ctx, {
                code: 0,
                msg: 'success',
                data: user
            });
        } catch (error) {
            createSuccessResponse(ctx, {
                code: -1, //业务错误code，可根据业务具体约定
                msg: error.message
            });
        }
    }

    @request("put", "/users/{id}")
    @summary("Update a user")
    @path({
        id: { type: "number", required: true, description: "id of user" }
    })
    @body(userSchema)
    public static async updateUser(ctx: BaseContext): Promise<void> {
        // 业务错误通常status仍然是200,具体业务错误是根据业务code区别
        // controller层只做路由映射，实际的业务逻辑放在service层处理
        try {
            const {id} = ctx.params
            const {name, email} = ctx.request.body;
            const user: User = await UserService.updateUser({id,name,email});
            createSuccessResponse(ctx, {
                code: 0,
                msg: 'success',
                data: user
            });
        } catch (error) {
            createSuccessResponse(ctx, {
                code: -1, //业务错误code，可根据业务具体约定
                msg: error.message
            });
        }
    }

    @request("delete", "/users/{id}")
    @summary("Delete user by id")
    @path({
        id: { type: "number", required: true, description: "id of user" }
    })
    public static async deleteUser(ctx: BaseContext): Promise<void> {
        // 业务错误通常status仍然是200,具体业务错误是根据业务code区别
        // controller层只做路由映射，实际的业务逻辑放在service层处理
        try {
            const {id} = ctx.params
            await UserService.deleteUser(id);
            createSuccessResponse(ctx, {
                code: 0,
                msg: 'success'
            });
        } catch (error) {
            createSuccessResponse(ctx, {
                code: -1, //业务错误code，可根据业务具体约定
                msg: error.message
            });
        }
    }

    @request("delete", "/testusers")
    @summary("Delete users generated by integration and load tests")
    public static async deleteTestUsers(ctx: BaseContext): Promise<void> {
        // 业务错误通常status仍然是200,具体业务错误是根据业务code区别
        // controller层只做路由映射，实际的业务逻辑放在service层处理
        try {
            await UserService.deleteTestUsers()
            createSuccessResponse(ctx, {
                code: 0,
                msg: 'success'
            });
        } catch (error) {
            createSuccessResponse(ctx, {
                code: -1, //业务错误code，可根据业务具体约定
                msg: error.message
            });
        }
    }
}